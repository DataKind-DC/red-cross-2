source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
ls()
names()
dimonds(carat)
diamonds(carat)
tapply(diamonds, summary)
ddply(diamonds, cut, summarise, mean=mean(dt), sum=sum(dt))
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
View(diamonds3)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
diamonds4
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
View(diamonds5)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
View(diamonds6)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
View(diamonds6)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
diamonds%>%
group_by(color)%>%
summarise(mean.price = mean(price), sd.price = sd(price))
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
diamonds%>%
group_by(color)%>%
summarise(mean.price = mean(price), sd.price = sd(price))
diamonds
diamonds%>%
group_by(color)
diamonds%>%
group_by(color)%>%
summarise(mean.price = mean(price), sd.price = sd(price))
diamonds2%>%
group_by(color)%>%
summarise(mean.price = mean(price), sd.price = sd(price))
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
remove.packages('plyr')
remove.packages(plyr)
library(dplyr)
library(ggplot2)
diamonds2%>%
dplyr::group_by(color)%>%
summarise(mean.price = mean(price), sd.price = sd(price))
diamonds2%>%
group_by(color)%>%
summarise(mean.price = mean(price), sd.price = sd(price))
diamonds%>%
group_by(color)%>%
summarise(mean.price = mean(price), sd.price = sd(price))
diamonds%>%
# group_by(color)%>%
summarise(mean.price = mean(price), sd.price = sd(price))
diamonds%>%group_by(color)%>%summarise(mean.price = mean(price), sd.price = sd(price))
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
library(dplyr)
library(ggplot2)
install.packages('plyr')
library(ggplot2)
data('diamonds')
head(diamonds)
diamonds%>%group_by(color)%>%summarise(mean.price = mean(price), sd.price = sd(price))
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
View(price)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
View(price)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
diamonds%>%
group_by(color)%>%
summarise(mean_price = mean(price), sd_price = sd(price), min_price =min(price) , max_price = max(price))
summary(diamonds)
diamonds%>%summarise(mean_price = mean(price))
diamonds%>%
mutate(above_ave = ifelse(price > 3932.8 , '1', '0'))
mean(diamonds$price)
pprice=mean(diamonds$price)
pprice=mean(diamonds$price)
diamonds%>%
mutate(above_ave = ifelse(price > 3932.8 , '1', '0'))
diamonds%>%
mutate(above_ave = ifelse(price > pprice , '1', '0'))
#3. Average price of VVS2 (clarity) that is Very Good or better
diamonds%>%
filter(clarity='VVS2' & cut='Very Good') %>%
summarise(mean_price = mean(price), sd_price = sd(price))
#3. Average price of VVS2 (clarity) that is Very Good or better
diamonds%>%
filter(clarity=='VVS2' & cut=='Very Good') %>%
summarise(mean_price = mean(price), sd_price = sd(price))
diamonds%>%
group_by(color)%>%
summarise(mean_price = mean(price), sd_price = sd(price), min_price =min(price) , max_price = max(price))%>%
mutate(above_ave = ifelse(price > pprice , '1', '0'))
diamonds%>%
group_by(color)%>%
summarise(mean_price = mean(price), min_price =min(price) , max_price = max(price))%>%
mutate(above_ave = ifelse(price > 3932.8 , '1', '0'))
diamonds%>%
group_by(color)%>%
summarise(mean_price = mean(price), sd_price = sd(price), min_price =min(price) , max_price = max(price))
diamonds%>%
group_by(color)%>%
summarise(mean_price = mean(price), min_price =min(price) , max_price = max(price))%>%
mutate(above_ave = ifelse(mean_price > 3932.8 , '1', '0'))
diamonds%>%
group_by(color)%>%
summarise(mean_price = mean(price), min_price =min(price) , max_price = max(price))%>%
mutate(above_ave = ifelse(mean_price > pprice , '1', ifelse(mean_price==pprice, 'exact', 'below')))
diamonds%>%
group_by(color)%>%
summarise(mean_price = mean(price), min_price =min(price) , max_price = max(price))%>%
mutate(above_ave = ifelse(mean_price > pprice , 'above', ifelse(mean_price==pprice, 'exact', 'below')))
diamonds%>%
filter(cut %in% c('Very Good', 'Premium', 'Ideal')%>%
group_by(clarity)%>%
summarise(mean_price = mean(price))%>%
mutate(above_ave = ifelse(mean_price > pprice , 'above', ifelse(mean_price==pprice, 'exact', 'below')))
diamonds%>%
filter(cut %in% c('Very Good', 'Premium', 'Ideal')%>%
group_by(clarity)%>%
summarise(mean_price = mean(price))%>%
diamonds%>%
filter(cut %in% c('Very Good', 'Premium', 'Ideal')%>%
group_by(clarity)%>%
summarise(mean_price = mean(price))
diamonds%>%
filter(cut %in% c('Very Good', 'Premium', 'Ideal'))%>%
group_by(clarity)%>%
summarise(mean_price = mean(price))
View(diamonds)
diamonds%>%
filter(clarity=='VVS2' & cut=='Very Good') %>%
summarise(mean_price = mean(price), sd_price = sd(price))
diamonds%>%
filter(clarity=='VVS2' & cut=='Very Good') %>%
group_by(color) %>%
summarise(mean_price = mean(price), sd_price = sd(price))
diamonds%>%
filter(cut %in% c('Very Good', 'Premium', 'Ideal'))%>%
group_by(clarity)%>%
summarise(mean_price = mean(price))
temp <- diamonds %>%
group_by(cut) %>%
summarize(mean_price = mean(price), sd_price=sd(price))
View(temp)
price_by_cut <- diamonds %>%
group_by(cut, clarity) %>%
summarize(mean_price=mean(price), sd_price=sd(price))
ggplot(price_by_cut, aes(x=cut, y=mean_price)) +
geom_bar(stat='identity') +
labs(x='Cut',
y='Mean Price')
ggplot(price_by_cut, aes(x=cut, y=mean_price)) +
geom_col()
ggplot(price_by_cut, aes(x=cut, y=mean_price)) +
geom_col() +
labs(x='Cut',
y='Mean Price',
title='Average Diamond Price by Cut - Starter Plot')
View(price_by_cut)
ggplot(price_by_cut, aes(x=cut, y=mean_price)) +
geom_col() +
facet_wrap(~clarity)+
labs(x='Cut',
y='Mean Price',
title='Average Diamond Price by Cut - Starter Plot')
ggplot(price_by_cut, aes(x=cut, y=mean_price, fill=clarity)) +
geom_col() +
facet_wrap(~clarity)+
labs(x='Cut',
y='Mean Price',
title='Average Diamond Price by Cut - Starter Plot')
ggplot(price_by_cut, aes(x=cut, y=mean_price, fill=color)) +
geom_col() +
facet_wrap(~clarity)+
labs(x='Cut',
y='Mean Price',
title='Average Diamond Price by Cut - Starter Plot')
ggplot(price_by_cut, aes(x=cut, y=mean_price, fill=clarity)) +
geom_col() +
facet_wrap(~clarity)+
labs(x='Cut',
y='Mean Price',
title='Average Diamond Price by Cut - Starter Plot')
ggplot(price_by_cut, aes(x=cut, y=mean_price, fill=clarity)) +
geom_col() +
geom_errorbar(sd_price)+
facet_wrap(~clarity)+
labs(x='Cut',
y='Mean Price',
title='Average Diamond Price by Cut - Starter Plot')
ggplot(price_by_cut, aes(x=cut, y=mean_price, fill=clarity)) +
geom_col() +
geom_errorbar(x=cut, y=sd_price)+
facet_wrap(~clarity)+
labs(x='Cut',
y='Mean Price',
title='Average Diamond Price by Cut - Starter Plot')
ggplot(price_by_cut, aes(x=cut, y=mean_price, fill=clarity)) +
geom_errorbar(x=cut, y=sd_price)+
facet_wrap(~clarity)+
labs(x='Cut',
y='Mean Price',
title='Average Diamond Price by Cut - Starter Plot')
ggplot(price_by_cut, aes(x=cut, y=mean_price, fill=clarity)) +
geom_errorbar(price_by_cut, aes(x=cut, y=sd_price))+
facet_wrap(~clarity)+
labs(x='Cut',
y='Mean Price',
title='Average Diamond Price by Cut - Starter Plot')
g1 <- ggplot(price_by_cut, aes(x=cut, y=mean_price, fill=clarity)) +
geom_col() +
facet_wrap(~clarity)+
labs(x='Cut',
y='Mean Price',
title='Average Diamond Price by Cut - Starter Plot')
g1 <- ggplot(price_by_cut, aes(x=cut, y=mean_price, fill=clarity)) +
geom_col() +
facet_wrap(~clarity)+
labs(x='Cut',
y='Mean Price',
title='Average Diamond Price by Cut - Starter Plot')
g1
g1+
geom_errorbar(price_by_cut, aes(x=cut, y=sd_price))
g1 <- ggplot(price_by_cut, aes(x=cut, y=mean_price, fill=clarity)) +
geom_col() +
labs(x='Cut',
y='Mean Price',
title='Average Diamond Price by Cut - Starter Plot')
g1
#Add standard deviations to this graph
g1+
geom_errorbar(price_by_cut, aes(x=cut, y=sd_price))
g1 <- ggplot(price_by_cut, aes(x=cut, y=mean_price)) +
geom_col() +
labs(x='Cut',
y='Mean Price',
title='Average Diamond Price by Cut - Starter Plot')
g1
g1+
geom_errorbar(price_by_cut, aes(x=cut, y=sd_price))
g1+ geom_errorbar(aes(x=cut, y=sd_price))
g1+ geom_errorbar(aes(x=cut, ymin=sd_price))
g1+ geom_errorbar(aes(x=cut, ymin=sd_price ymax=sd_price))
g1+ geom_errorbar(aes(x=cut, ymin=sd_price, ymax=sd_price))
g1 <- ggplot(price_by_cut, aes(x=cut, y=mean_price)) +
geom_col() +
facet_wrap(~clarity)+
labs(x='Cut',
y='Mean Price',
title='Average Diamond Price by Cut - Starter Plot')
g1
#Add standard deviations to this graph
g1+ geom_errorbar(aes(x=cut, ymin=sd_price, ymax=sd_price))
g1+ geom_errorbar(aes(x=cut, ymin=mean_price-sd_price, ymax=mean_price+sd_price))
g1 <- ggplot(price_by_cut, aes(x=cut, y=mean_price, fill=clarity)) +
geom_col() +
facet_wrap(~clarity)+
labs(x='Cut',
y='Mean Price',
title='Average Diamond Price by Cut - Starter Plot')
g1
#Add standard deviations to this graph
g1+ geom_errorbar(aes(x=cut, ymin=mean_price-sd_price, ymax=mean_price+sd_price))
g3 <- g1 + geom_col(fill=='#33C1FF')
g3
g3 <- g1 + geom_col(fill='#33C1FF')
g3
g3 <- g2 + geom_col(fill='#33C1FF')
g3
source('~/Documents/R_course_March01_2018.R', echo=TRUE)
g2 <- g1 + geom_errorbar(aes(x=cut, ymin=mean_price-sd_price, ymax=mean_price+sd_price), width=0.5, size=1)
g2
g3 <- g2 + geom_col(fill='#33C1FF')
g3
g4 <- g3 + coord_flip()
g4 <- g3 + coord_flip()
g4
g5 <- g4 + annontate('text', 'test')
g5
g5 <- g4 + annotate('text', 'test')
g5
g5 <- g4 + annotate(geom='text', x=3.5, y=7000, label='test')
g5
scatter.df <-diamonds %>%
sample_n(5000) %>%
select(carat, price, cut, depth)
ggplot(scatter.df, aes(x=carat, y=price, color=cut)) +
geom_point()
scatter.df <-diamonds %>%
sample_n(5000) %>%
select(carat, price, cut, depth)
ggplot(scatter.df, aes(x=carat, y=price, color=cut)) +
geom_point()+
labs(x='Carat',
y='Price'
)
ggplot(scatter.df, aes(x=carat, y=price, color=cut)) +
geom_point(alpha=0.5)+
labs(x='Carat',
y='Price'
)
ggplot(scatter.df, aes(x=carat, y=price, color=cut, size=depth)) +
geom_point(alpha=0.5, size=0.5)+
labs(x='Carat',
y='Price'
)
#' ---
#' ---
#' title: "Prep data for model 1a: RC smoke alarm presence from home visit"
#' author: Andrew Brooks
#' date: October 19, 2015
#' output:
#'    html_document:
#'      toc: true
#'      highlight: zenburn
#' ---
# clear everything
rm(list=ls())
gc()
#' #### Getting setup
# set directory for project
setwd('/Users/judyyang/GitHub/red-cross-2')
# install libraries
# install.packages('data.table') - OK
# install.packages('plyr')
# install.packages('stringr') not installed
# install.packages('tigris') ‘tigris’ is not available (for R version 3.2.2)
# install.packages('rgdal') ‘rgdal’ is not available (for R version 3.2.2)
# install.packages('leaflet')- OK
# install.packages('glmnet') - OK
# install.packages('randomForest')
# install.packages("githubinstall") - OK
# install_github('brooksandrew/Rsenal')
# load libraries
library('Rsenal')
library('devtools')
library('data.table')
library('plyr')
library('stringr')
#library('tigris');
#library('rgdal');
library('leaflet')
library('glmnet');
library('randomForest')
###################################
# TARGET VARIABLE:
###################################
# load RC data
rc <- data.table(read.csv('./data/HomeFire_SmokeAlarmInstalls.csv', stringsAsFactors=F))
rc[,fips:=str_pad(fips, 5, side='left', pad='0')]
# ### calculating share of home visits in county that led to smoke alarm install
# Note each county should belong to just one state, but the same city might be assigned to multiple counties
# and the the same county might be assigned multiple cities.
Mode <- function(x) unique(x)[which.max(table(x))]
rcC <- rc[,.(N=.N, alarm_ins_pct=sum(alarms_ins>0)/.N, state=Mode(state), city=Mode(city)), by='fips']
rcC <- rcC[N>25,] #keeping just counties w stable data for ratio
###################################
# PREDICTORS:
###################################
# This is the data used with Enigma's model.  Can be downloaded here: https://github.com/enigma-io/ahs-acs
acs <- fread('http://enigma-public.s3.amazonaws.com/projects/smoke-alarm-risk/data/acs.csv')
# removing duplicate columns
acs <- acs[,duplicated(names(acs))==F, with=F]
# the acs tables have a full geoid,
# but we need a simplified version to just
# get the block-group summary level.
parse_id <- function(x) strsplit(x, 'US')[[1]][2]
parse_sum_level <- function(x) strsplit(x, 'US')[[1]][1]
acs$geoid2 <- as.character(unlist(llply(acs$geoid, parse_id)))
acs$sum_level <- as.character(unlist(llply(acs$geoid, parse_sum_level)))
# understanding census coding: https://www.census.gov/geo/reference/geoidentifiers.html
# sumlevel == 15000 is block group
# sumlevel == 14000 is census tract
# sumlevel == 05000 is county
# pulling out state and county for ease of use
acs$state <- substr(acs$geoid2, 0, 2)
acs$cnty <- substr(acs$geoid2, 3, 5)
acs$tract <- substr(acs$geoid2, 6, 11)
acsC <- acs[sum_level=='05000',]
acsCT <- acs[sum_level=='14000',]
########################################
# MERGING PREDICTORS & TARGET VARIABLE:
########################################
setnames(acsC, 'geoid2', 'fips')
setkey(acsC, fips)
setkey(rcC, fips)
abtm <- merge(acsC, rcC, by='fips')
# removing variables that are missing more than a little bit
abtm[, `:=`(plumb_no=NULL, plumb_yes=NULL)]
abtm <- abtm[complete.cases(abtm)]
########################################
# MODELING
########################################
yvar <- 'alarm_ins_pct'
xvars <- names(abtm)[which(names(abtm)=='tenure_renter_occupied'):which(names(abtm)=='hdsb_yes')]
# removing xvars with more than 5% missing values.  we should really fill these missing census tracts in with the county numbers.
xvars <- setdiff(xvars, {a=data.table(missdf(acsCT)); a[misspct>0.05, name]})
## RANDOM FOREST
xdf <- data.frame(abtm[,xvars, with=F])
y <- abtm[[yvar]]
rf <- randomForest(x=xdf, y=y, ntree=100)
rfImp(rf)
## GLM
form <- makeForm(yvar,xvars)
fitlm <- lm(form, data=abtm)
## LASSO
lasso <- glmnet(x=as.matrix(xdf), y=as.matrix(y), nlambda=20, alpha=1)
plot(lasso)
cv_lasso <- cv.glmnet(x=as.matrix(xdf), y=as.matrix(y), alpha=1, type.measure='deviance')
plot(cv_lasso)
bestlam <- cv_lasso$lambda.min
coef(lasso, s=bestlam)
########################################
# PREDICTING
########################################
## TO DO: Fill in census tract info with county info when tract is missing
## keeping just counties/tracts with no missing data
acsC_c <- acsC[complete.cases(acsC[,xvars, with=F]),]
acsCT_c <- acsCT[complete.cases(acsCT[,xvars, with=F]),]
# counties
acsC_c$pred_rf <- predict(rf, newdata=acsC_c[,xvars, with=F], type='response')
acsC_c$pred_lasso <- predict(lasso, s=bestlam, newx=as.matrix(acsC_c[,xvars, with=F]), type='response')
# tracts
acsCT_c$pred_rf <- predict(rf, newdata=acsCT_c[,xvars, with=F], type='response')
acsCT_c$pred_lasso <- predict(lasso, s=bestlam, newx=as.matrix(acsCT_c[,xvars, with=F]))
acsCT_c[,risk_1a:=(pred_rf+pred_lasso)/2]
acsCT_c[risk_1a>1, risk_1a:=1]
write.table(acsCT_c[, .(risk_1a, state, cnty, tract, geoid2)], file='./phase1-results/smoke-alarm-risk-scores.csv', row.names=F, sep=',')
########################################
# MAPPING
########################################
# getting base map from tigris
l48states <- str_pad(setdiff(1:56, c(2, 15, 60, 66, 72, 78)), 2, 'left', '0')
cntymap <- tigris::counties(state=l48states)
#plot(cntymap) # this works but it's slow
pred_df <- data.frame(acsC_c[,.(fips, pred_rf, pred_lasso)])
plotind <- 'pred_rf'
cntymap_merged <- geo_join(cntymap, pred_df, "GEOID", "fips")
pal <- colorQuantile("Greens", NULL, n = 10)
popup <- paste0("Probability of home needing smoke alarm in county: ", as.character(cntymap_merged[[plotind]]))
## Does embed in browser with knitr, but takes up 150MB of space and crashes browser.  Does work in when run in RStudio
if(1==0) {
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = cntymap_merged,
fillColor = ~pal(cntymap_merged[[plotind]]),
fillOpacity = 0.7,
weight = 0.2,
popup = popup) %>%
addLegend(pal = pal,
values = cntymap_merged[[plotind]],
position = "bottomright",
title = "Predictions")
}
# TO DO: create target variable at county level for red cross visits
# TO DO: download relevant NGHIS data at county level for model training
# TO DO: download same NGHIS data indicators at census tract level for model scoring
rmarkdown::render('./phase1-results/Model1A-replication.R', output_file = 'Model1A-markdown.html')
cdata <- ddply(acsCT_c, c("state"), summarise,
N    = length(risk_1a),
mean = mean(risk_1a),
sd   = sd(risk_1a),
se   = sd / sqrt(N)
)
cdata
